{
   "AWSTemplateFormatVersion": "2010-09-09",
   "Resources": {
      "LAMBDAROLE": {
        "Type": "AWS::IAM::Role",
        "Properties": {
           "AssumeRolePolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [ {
                 "Effect": "Allow",
                 "Principal": {
                    "Service": [ "lambda.amazonaws.com" ]
                 },
                 "Action": [ "sts:AssumeRole" ]
              } ]
           },
           "Policies": [ {
              "PolicyName": {
                "Ref": "LambdaExecutionRoleName"
              },
              "PolicyDocument": {
                 "Version" : "2012-10-17",
                 "Statement": [
                   {
                       "Effect": "Allow",
                       "Action": "logs:*",
                       "Resource": ["arn:aws:logs:*:*:*"]
                   },
                   {
                       "Effect": "Allow",
                       "Action": "iot:*",
                       "Resource": "*"
                   }
                 ]
              }
           } ]
         }
      },

      "LAMBDAFUNCTION": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Handler": "index.handler",
          "Role": { "Fn::GetAtt" : ["LAMBDAROLE", "Arn"] },
          "Code": {
            "ZipFile":  { "Fn::Join": ["\n", [
              "var AWS = require('aws-sdk');",
              "var iotdata = new AWS.IotData({endpoint: '<YOUR ENDPOINT HERE>'});",
              "exports.handler = function(event, context) {",
              " var message = null;",
              " if (event.VALUE == 1) {",
              "   message='buzzeron';",
              " } else {",
              "   message='buzzeroff';",
              " }",
              " var params = {",
              "   topic: 'MEETUP/IOT/OUTGOING',",
              "   payload: message,",
              "   qos: 0",
              " };",
              " iotdata.publish(params, function(err, data){",
              "   if(err){",
              "     console.log(err);",
              "   }",
              "   else{",
              "     console.log('success');",
              "     context.succeed(event);",
              "   }",
              " });",
              "};",
            ]]}
          },
          "Runtime": "nodejs4.3",
          "FunctionName" : {
             "Ref": "LAMBDAFunctionName"
          },
          "Timeout": "25"
        }
      },

      "MYIOTLAMBDARULE": {
         "Type": "AWS::IoT::TopicRule",
         "DependsOn" : "LAMBDAFUNCTION",
         "Properties": {
            "RuleName": {
               "Ref": "LAMBDARuleName"
            },
            "TopicRulePayload": {
               "RuleDisabled": "false",
               "AwsIotSqlVersion": "beta",
               "Sql": "SELECT * FROM 'MEETUP/IOT/INCOMING/SENSORS/TOUCH'",
               "Actions": [{
                  "Lambda": {
                     "FunctionArn": {"Fn::GetAtt" : [ "LAMBDAFUNCTION" , "Arn" ]}
                  }
               }]
            }
         }
      }
   },
   "Parameters": {
      "LAMBDARuleName": {
         "Type": "String",
         "Default": "IOTLAMBDARULE"
      },
      "RoleName": {
         "Type": "String",
         "Default": "IOTLAMBDAROLE"
      },
      "LambdaExecutionRoleName": {
         "Type": "String",
         "Default": "LAMBDAEXECUTIONROLE"
      },
      "LAMBDAFunctionName": {
         "Type": "String",
         "Default": "IOTLAMBDAFUNCTION"
      },

   }
}
